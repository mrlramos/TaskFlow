services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: taskflow-postgres
    restart: unless-stopped
    environment:
      POSTGRES_DB: taskflow
      POSTGRES_USER: taskflow_user
      POSTGRES_PASSWORD: taskflow_pass
      POSTGRES_HOST_AUTH_METHOD: trust
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./init-db:/docker-entrypoint-initdb.d
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U taskflow_user -d taskflow"]
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network

  # RabbitMQ Message Broker
  rabbitmq:
    image: rabbitmq:3-management-alpine
    container_name: taskflow-rabbitmq
    restart: unless-stopped
    environment:
      RABBITMQ_DEFAULT_USER: taskflow_user
      RABBITMQ_DEFAULT_PASS: taskflow_pass
      RABBITMQ_DEFAULT_VHOST: taskflow_vhost
    ports:
      - "5672:5672"   # AMQP port
      - "15672:15672" # Management UI
    volumes:
      - rabbitmq_data:/var/lib/rabbitmq
    healthcheck:
      test: rabbitmq-diagnostics -q ping
      interval: 10s
      timeout: 5s
      retries: 5
    networks:
      - taskflow-network

  # Node.js API
  api:
    build:
      context: .
      target: dev
    container_name: taskflow-api
    restart: unless-stopped
    environment:
      # Database configuration
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: taskflow
      DB_USER: taskflow_user
      DB_PASS: taskflow_pass
      
      # RabbitMQ configuration
      RABBITMQ_URL: amqp://taskflow_user:taskflow_pass@rabbitmq:5672/taskflow_vhost
      
      # Application configuration
      NODE_ENV: development
      PORT: 3000
    ports:
      - "3000:3000"
    volumes:
      - ./taskflow-api:/app
      - /app/node_modules  # Anonymous volume for node_modules
    depends_on:
      postgres:
        condition: service_healthy
      rabbitmq:
        condition: service_healthy
    healthcheck:
      test: ["CMD", "node", "-e", "require('http').get('http://localhost:3000/health', (res) => { process.exit(res.statusCode === 200 ? 0 : 1) })"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - taskflow-network

# Named volumes for data persistence
volumes:
  postgres_data:
    driver: local
  rabbitmq_data:
    driver: local

# Custom network for service communication
networks:
  taskflow-network:
    driver: bridge 